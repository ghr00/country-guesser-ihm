#!/usr/bin/env -P /usr/bin:/usr/local/bin python3 -B
# coding: utf-8

#
#  GameEngine.py
#  GameEngine version 1.0
#  Created by Ingenuity i/o on 2023/01/27
#
# The agent that will receive player inputs' (text), then process it, then broadcast the current game's state to all
# connected players.
#

import json
import random

import ingescape as igs

from status import Status
from utils import is_valid_country


class Singleton(type):
    _instances = {}

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


# read the list of countries from the text file generated by extract.py
with open("data/countries.txt", "r") as f:
    world_countries = f.readlines()

# a set of colors already assigned to players to ensure uniqueness
assigned_colors = set()


class GameEngine(metaclass=Singleton):
    def __init__(self):
        # inputs

        # input received from the WebUserInterface Agent in the form of the following JSON
        # {
        #   "name": "player_name",
        #   "guess": "country_guess"
        # }
        self.player_inputI = None

        # outputs

        # first output sent to the GameStateTransformer Agent in the form of the following JSON
        # {
        #   "countries": [
        #     {
        #       "name": "country",
        #       "guesser": "player"
        #     }
        #   ],
        #   "ladder": [
        #     {
        #       "name": "player",
        #       "score": score,
        #       "color": "hex"
        #     }
        #   ]
        # }
        self._game_state_jsonO = {"countries": [], "ladder": []}

        # second output sent to the WebUserInterface Agent in the form of the following JSON
        # {
        #   "status": Status.UNDEFINED.value
        # }
        self._status_jsonO = {"status": Status.UNDEFINED.value}

        # internal variables used to store the current player's name and the country he guessed
        self.player_name = None
        self.country_guess = None

    # outputs
    @property
    def game_state_jsonO(self):
        return self._game_state_jsonO

    @game_state_jsonO.setter
    def game_state_jsonO(self, value):
        self._game_state_jsonO = value
        if self._game_state_jsonO is not None:
            igs.output_set_string("game_state_json", self._game_state_jsonO)

    @property
    def status_jsonO(self):
        return self._status_jsonO

    @status_jsonO.setter
    def status_jsonO(self, value):
        self._status_jsonO = value
        if self._status_jsonO is not None:
            igs.output_set_string("status_json", self._status_jsonO)

    # main function called in the player input callback in main.py
    # first parses the input, then processes the player's name, then processes the player's guess
    def run(self):
        self.parse_input()
        self.process_username()
        self.process_guess()

    # parses the JSON input received from the WebUserInterface Agent
    # sets the internal variables
    def parse_input(self):
        player_input = json.loads(self.player_inputI)
        self.player_name = player_input["name"]
        self.country_guess = player_input["guess"]

    # processes the player's name
    # if the player is new, adds him to the ladder with a score of 0 and a random color
    # if the player is not new, does nothing
    def process_username(self):
        name = self.player_name
        # if the player name is not in the ladder, add him
        if name not in [player["name"] for player in self._game_state_jsonO["ladder"]]:
            print("Player", name, "joined the game.")
            # generate a unique random color
            color = "#" + "".join([random.choice("0123456789ABCDEF") for _ in range(6)])
            while color in assigned_colors:
                color = "#" + "".join([random.choice("0123456789ABCDEF") for _ in range(6)])
            assigned_colors.add(color)
            # update the ladder with the new player info
            self._game_state_jsonO["ladder"].append({"name": name, "score": 0, "color": color})

    # processes the player's guess
    # if the guess is invalid, sets the status to INVALID_GUESS
    # if the guess is valid but has already been guessed, sets the status to ALREADY_GUESSED
    # if the guess is valid and has not been guessed, sets the status to CORRECT_GUESS
    # and updates the ladder with the new score
    def process_guess(self):
        guess = self.country_guess
        # checks if the guess is valid and returns the correct spelling as is in the list of countries
        [is_valid, guess] = is_valid_country(guess, world_countries)
        # process the guess
        if not is_valid:
            # if the guess is invalid, set the status to INVALID_GUESS
            self._status_jsonO["status"] = Status.INVALID_GUESS.value
        else:
            # if the guess is valid, check if it has already been guessed, if so, set the status to ALREADY_GUESSED
            if guess in [element["name"] for element in self._game_state_jsonO["countries"]]:
                self._status_jsonO["status"] = Status.ALREADY_GUESSED.value
            else:
                # otherwise, set the status to CORRECT_GUESS and update the game state
                print("Player", self.player_name, "guessed", guess, "correctly.")
                # add the country to the list of guessed countries
                self._game_state_jsonO["countries"].append({"name": guess, "guesser": self.player_name})
                # update the ladder with the new score
                self._status_jsonO["status"] = Status.CORRECT_GUESS.value
                # update the score of the player who guessed correctly
                next(p for p in self._game_state_jsonO["ladder"] if p["name"] == self.player_name)['score'] += 1
                # sort the ladder by score
                self._game_state_jsonO["ladder"] = sorted(self._game_state_jsonO["ladder"], key=lambda k: k['score'],
                                                          reverse=True)
        # update the outputs sent to the GameStateTransformer Agent
        igs.output_set_string("game_state_json", json.dumps(self._game_state_jsonO))
        igs.output_set_string("status_json", json.dumps(self._status_jsonO))
