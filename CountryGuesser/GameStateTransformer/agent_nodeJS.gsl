.# > name="1- Full agent"
.# > keyword="NodeJS"
.# > description="A fully-fledged NodeJS agent, ready for industrial use."
.# > agentMode="ONE"
.# > onlyAgentDefinitionSupport="true"
.template 0
function typeToIGSType (type)
   if (type = "STRING")
       return "IGS_STRING_T"
   elsif (type = "INTEGER")
       return "IGS_INTEGER_T"
   elsif (type = "DOUBLE")
       return "IGS_DOUBLE_T"
   elsif (type = "BOOL")
       return "IGS_BOOL_T"
   elsif (type = "IMPULSION")
       return "IGS_IMPULSION_T"
   elsif (type = "DATA")
       return "IGS_DATA_T"
   endif
endfunction typeToIGSType
.endtemplate
.
.template 1
.ignorecase = 0
.
.####################################################################################
.echo "Creating directories structure ..."
.directory.create("src")
.
.
.####################################################################################
.echo "Generating package.json"
.output "package.json"
{
  "name": "$(definition.name)",
  "version": "$(definition.version)",
  "description": $(defined(definition->description) ?? "\"$(definition->description.)\"" ? "\"\""),
  "main": "index.js",
  "scripts": {
    "test": "echo \\"Error: no test specified\\" && exit 1",
    "build": "node index.js"
  },
  "author": $(defined(definition.author) ?? "\"$(definition.author)\""? "\"\""),
  "license": "SEE LICENSE IN LICENSE file",
  "dependencies": {
    "command-line-args": "*",
    "ingescape": "*"
  }
}

.
.####################################################################################
.echo "Generating src/$(definition.name:camel).js"
.output "src/$(definition.name:camel).js"
//
//  $(definition.name:camel).js
//
//  Created by $(definition.author) on $(date.picture()).
//  $(definition.copyright)
//

const igs = require('ingescape');

class $(definition.name:pascal) {

  constructor() {
.if (count(definition.input))
    //inputs
.for definition.input
.if ((input.type = "INTEGER") | (input.type = "DOUBLE"))
    this.$(input.name:camel)I = 0;
.elsif (input.type = "BOOL")
    this.$(input.name:camel)I = false;
.elsif (input.type = "STRING")
    this.$(input.name:camel)I = "";
.elsif (input.type = "DATA")
    this.$(input.name:camel)I = null;
.endif
.endfor
.endif
.if (count(definition.output))

    //outputs
.endif
.for definition.output
.if ((output.type = "INTEGER") | (output.type = "DOUBLE"))
    this.$(output.name:camel)O = 0;
.elsif (output.type = "BOOL")
    this.$(output.name:camel)O = false;
.elsif (output.type = "STRING")
    this.$(output.name:camel)O = "";
.elsif (output.type = "DATA")
    this.$(output.name:camel)O = null;
.endif
.endfor
.if (count(definition.parameter))

    //parameters
.endif
.for definition.parameter
.if ((parameter.type = "INTEGER") | (parameter.type = "DOUBLE"))
    this.$(parameter.name:camel)P = 0;
.elsif (parameter.type = "BOOL")
    this.$(parameter.name:camel)P = false;
.elsif (parameter.type = "STRING")
    this.$(parameter.name:camel)P = "";
.elsif (parameter.type = "DATA")
    this.$(parameter.name:camel)P = null;
.endif
.endfor

    //add code here if needed

  }
.if (count(definition.input))

  /////////////////////////////////////////////////////////////////////
  //inputs
.endif
.for definition.input

  // $(input.name)
.if (input.type = "IMPULSION")
  set$(input.name:pascal)I() {
    //add code here if needed

  }
.else
  set$(input.name:pascal)I($(input.name:camel)I) {
    this.$(input.name:camel)I = $(input.name:camel)I;

    //add code here if needed

  }
  get$(input.name:pascal)I() {
    return this.$(input.name:camel)I;
  }
.endif
.endfor
.if (count(definition.output))

  /////////////////////////////////////////////////////////////////////
  //outputs
.endif
.for definition.output

  // $(output.name)
.if (output.type = "IMPULSION")
  set$(output.name:pascal)O() {
    //add code here if needed

    igs.outputSetImpulsion("$(output.name)");
  }
.else
  set$(output.name:pascal)O($(output.name:camel)O) {
    this.$(output.name:camel)O = $(output.name:camel)O;

    //add code here if needed

.if (output.type = "INTEGER")
    igs.outputSetInt("$(output.name)", this.$(output.name:camel)O);
.elsif (output.type = "DOUBLE")
    igs.outputSetDouble("$(output.name)", this.$(output.name:camel)O);
.elsif (output.type = "BOOL")
    igs.outputSetBool("$(output.name)", this.$(output.name:camel)O);
.elsif (output.type = "STRING")
    igs.outputSetString("$(output.name)", this.$(output.name:camel)O);
.elsif (output.type = "DATA")
    igs.outputSetData("$(output.name)", this.$(output.name:camel)O);
.endif
  }
  get$(output.name:pascal)O() {
    return this.$(output.name:camel)O;
  }
.endif
.endfor
.if (count(definition.parameter))

  /////////////////////////////////////////////////////////////////////
  //parameters
.endif
.for definition.parameter

  // $(parameter.name)
  set$(parameter.name:pascal)P($(parameter.name:camel)I) {
    this.$(parameter.name:camel)P = $(parameter.name:camel)P;

    //add code here if needed

  }
  get$(parameter.name:pascal)P() {
    return this.$(parameter.name:camel)P;
  }
.endfor
.if (count (service))

  /////////////////////////////////////////////////////////////////////
  //services
.endif
.for definition.service

  // $(service.name)
  $(service.name:camel)(\
.for service.argument
$(argument.name:camel)\
.if (! last ())
, \
.endif
.endfor
\) {
    //add code here if needed

  }
.endfor
};

module.exports = {$(definition.name:pascal):$(definition.name:pascal)};

.
.####################################################################################
.echo "Generating index.js"
.output "index.js"
//
//  index.js
//  $(definition.name) $(definition.version ?? "version " + definition.version)
//  Created $(defined(definition.author) ?? "by " + definition.author ? "") on $(date.picture())
//
//  $(defined(definition->description) ?? definition->description. ? "no description")
//  $(definition.copyright)
//

const igs = require('ingescape');
const commandLineArgs = require('command-line-args')
const fs = require('fs');
const $(definition.name:pascal) = require("./src/$(definition.name:camel)").$(definition.name:pascal);

const iopTypes = igs.iopTypes();
const iopValueTypes = igs.iopValueTypes();

let verbose = false;
let networkDevice = "";
let port = 5670;
let agentName = "$(definition.name)";
let igsCertPath = "";
let publicCertsDir = "";

let $(definition.name:camel) = new $(definition.name:pascal)();

.if (count(definition.input))
//inputs
.endif
.for definition.input
function $(input.name:camel)InputCallback(iopType, name, valueType, value, myData) {
.if (input.type = "IMPULSION")
  igs.info(name + " changed (impulsion)");
  $(definition.name:camel).set$(input.name:pascal)I();
.elsif (input.type = "DATA")
  igs.info(name + " changed (" + (value ? value.byteLength : "0") +" bytes)");
  $(definition.name:camel).set$(input.name:pascal)I(value);
.else
  igs.info(name + " changed to " + value);
  $(definition.name:camel).set$(input.name:pascal)I(value);
.endif
}

.endfor
.if (count(definition.parameter))
//parameters
.endif
.for definition.parameter
function $(parameter.name:camel)ParameterCallback(iopType, name, valueType, value, myData) {
.if (parameter.type = "DATA")
  igs.info(name + " changed (" + (value ? value.byteLength : "0") +" bytes)");
  $(definition.name:camel).set$(parameter.name:pascal)P(value);
.else
  igs.info(name + " changed to " + value);
  $(definition.name:camel).set$(parameter.name:pascal)P(value);
.endif
}

.endfor
.if (count(definition.service))
//services
.endif
.for definition.service
function $(service.name:camel)Callback(senderAgentName, senderAgentUUID, serviceName, serviceArgs, token, myData) {
  igs.info(senderAgentName + "(" + senderAgentUUID + ") called " + serviceName);
.if (count (service.argument))

  if (serviceArgs.length < $(count (service.argument)))
  {
      igs.warn("Invalid number of arguments ($(count (service.argument)) expected, " + serviceArgs.length \
      +  " received). Service will not be executed.");
      return;
  }
.endif
.index = 0
.for service.argument

  if ((serviceArgs[$(index)] == null) || (serviceArgs[$(index)].value == null))
  {
      igs.warn("Unable to retrieve service argument at index $(index). Service will not be executed.");
      return;
  }
  if (serviceArgs[$(index)].type !== iopValueTypes.$(typeToIGSType(type)))
  {
      igs.warn("Argument at index $(index) is not of type $(typeToIGSType(type)). Service will not be executed.");
      return;
  }
.index = index + 1
.endfor

  $(definition.name:camel).$(service.name:camel)(\
.index = 0
.for service.argument
serviceArgs[$(index)].value\
.if (! last ())
, \
.endif
.index = index + 1
.endfor
\);
}

.endfor

// Command line interpreter
function printUsage() {
    console.info("Usage examples:");
    console.info("    node index.js --verbose --device en0 --port 5670");
    console.info("\\nIngescape parameters:");
    console.info("--verbose : enable verbose mode in the application (default is disabled)");
    console.info("--device device_name : name of the network device to be used (useful if several devices are available)");
    console.info("--port port_number : port used for autodiscovery between agents (default: " + port + ")");
    console.info("--name agent_name : published name of this agent (default: " + agentName + ")");
    console.info("Security:");
    console.info("--igsCert filePath : path to a private certificate used to connect to a secure platform");
    console.info("--publicCerts directoryPath : path to a directory providing public certificates usable by ingescape");
}

const optionDefinitions = [
    { name : 'verbose', alias: 'v', type: Boolean},
    { name : 'device', alias: 'd', type: String},
    { name : 'port', alias: 'p', type: Number},
    { name : 'name', alias: 'n', type: String},
    { name : 'igsCert', type: String},
    { name : 'publicCerts', type: String},
    { name : 'help', alias: 'h', type: Boolean}
];

const options = commandLineArgs(optionDefinitions);
if (options.help) {
    printUsage();
    process.exit(0);
}
if (options.verbose)
    verbose = true;
if (options.device)
    networkDevice = options.device;
if (options.port)
    port = options.port;
if (options.name)
    agentName = options.name;
if (options.igsCert)
    igsCertPath = options.igsCert
if (options.publicCerts)
    publicCertsDir = options.publicCerts


igs.agentSetName(agentName);
igs.logSetConsole(verbose);
igs.logSetFile(true, null);
igs.logSetStream(verbose);
igs.definitionSetVersion("$(definition.version)");
igs.setCommandLine(process.argv.join(" "));

//security
if (igsCertPath.length > 0) {
    if (fs.existsSync(igsCertPath)) {
        igs.enableSecurity(igsCertPath, publicCertsDir);
    }
    else {
        igs.error("Could not find Ingescape certificate file '" + igsCertPath + "': exiting");
        process.exit();
    }
}

//network device if not set
if (networkDevice.length === 0) {
    //we have no device to start with: try to find one
    let devices = igs.netDevicesList();
    let addresses = igs.netAddressesList();
    if (devices.length === 1) {
        //we have exactly one compliant network device available: we use it
        networkDevice = devices[0];
        igs.info("using " + networkDevice + " as default network device (this is the only one available)");
    }
    else if ((devices.length === 2) && ((addresses[0] === "127.0.0.1") || (addresses[1] === "127.0.0.1"))) {
        //we have two devices, one of which is the loopback
        //pick the device that is NOT the loopback
        if (addresses[0] === "127.0.0.1")
            networkDevice = devices[1];
        else
            networkDevice = devices[0];
        igs.info("using " + networkDevice + " as default network device (this is the only one available that is not the loopback)");
    }
    else {
        if (devices.length === 0)
            igs.error("No network device found: aborting.");
        else {
            igs.error("No network device passed as command line parameter and several are available.");
            console.info("Please use one of these network devices:");
            for (let i = 0; i < devices.length; i++)
                console.info(devices[i]);
            console.info();
            printUsage();
        }
        process.exit();
    }
}

.for definition.parameter
.if ((parameter.type = "INTEGER") | (parameter.type = "DOUBLE"))
igs.parameterCreate("$(parameter.name)", iopValueTypes.$(typeToIGSType(parameter.type)), 0);
.elsif (parameter.type = "BOOL")
igs.parameterCreate("$(parameter.name)", iopValueTypes.$(typeToIGSType(parameter.type)), false);
.elsif (parameter.type = "STRING")
igs.parameterCreate("$(parameter.name)", iopValueTypes.$(typeToIGSType(parameter.type)), "");
.elsif (parameter.type = "DATA")
igs.parameterCreate("$(parameter.name)", iopValueTypes.$(typeToIGSType(parameter.type)), new ArrayBuffer());
.endif
.if (defined (parameter.description) & string.length(parameter.description))
igs.parameterSetDescription("$(parameter.name)", "$(parameter.description)");
.endif
.if (defined (parameter.constraint) & string.length(parameter.constraint))
igs.parameterAddConstraint("$(parameter.name)", "$(parameter.constraint)");
.endif
.endfor
.for definition.input
.if ((input.type = "INTEGER") | (input.type = "DOUBLE"))
igs.inputCreate("$(input.name)", iopValueTypes.$(typeToIGSType(input.type)), 0);
.elsif (input.type = "IMPULSION")
igs.inputCreate("$(input.name)", iopValueTypes.$(typeToIGSType(input.type)), null);
.elsif (input.type = "BOOL")
igs.inputCreate("$(input.name)", iopValueTypes.$(typeToIGSType(input.type)), false);
.elsif (input.type = "STRING")
igs.inputCreate("$(input.name)", iopValueTypes.$(typeToIGSType(input.type)), "");
.elsif (input.type = "DATA")
igs.inputCreate("$(input.name)", iopValueTypes.$(typeToIGSType(input.type)), new ArrayBuffer());
.endif
.if (defined (input.description) & string.length(input.description))
igs.inputSetDescription("$(input.name)", "$(input.description)");
.endif
.if (defined (input.constraint) & string.length(input.constraint))
igs.inputAddConstraint("$(input.name)", "$(input.constraint)");
.endif
.endfor
.for definition.output
.if ((output.type = "INTEGER") | (output.type = "DOUBLE"))
igs.outputCreate("$(output.name)", iopValueTypes.$(typeToIGSType(output.type)), 0);
.elsif (output.type = "IMPULSION")
igs.outputCreate("$(output.name)", iopValueTypes.$(typeToIGSType(output.type)), null);
.elsif (output.type = "BOOL")
igs.outputCreate("$(output.name)", iopValueTypes.$(typeToIGSType(output.type)), false);
.elsif (output.type = "STRING")
igs.outputCreate("$(output.name)", iopValueTypes.$(typeToIGSType(output.type)), "");
.elsif (output.type = "DATA")
igs.outputCreate("$(output.name)", iopValueTypes.$(typeToIGSType(output.type)), new ArrayBuffer());
.endif
.if (defined (output.description) & string.length(output.description))
igs.outputSetDescription("$(output.name)", "$(output.description)");
.endif
.if (defined (output.constraint) & string.length(output.constraint))
igs.outputAddConstraint("$(output.name)", "$(output.constraint)");
.endif
.endfor
.for definition.input
igs.observeInput("$(input.name)", $(input.name:camel)InputCallback, null);
.endfor
.for definition.parameter
igs.observeParameter("$(parameter.name)", $(parameter.name:camel)ParameterCallback, null);
.endfor
.for definition.service
igs.serviceInit("$(service.name)", $(service.name:camel)Callback, null);
.for service.argument
igs.serviceArgAdd("$(service.name)", "$(argument.name)", iopValueTypes.$(typeToIGSType(argument.type)));
.endfor
.endfor

//actually start ingescape
igs.startWithDevice(networkDevice, port);

// Properly stop our agent/process
function forcedStopCallback(myData) {
    process.exit();
}
igs.observeForcedStop(forcedStopCallback, null);

process.on('SIGINT', function() {
    process.exit();
});

process.on('exit', (code) => {
    igs.stop();
});

.
.####################################################################################
.echo "Generating other static files ..."
.output "LICENSE"
Add your license here
.
.output "README.md"
# $(definition.name)

## Prerequisites

* NodeJS (https://nodejs.org/en/download/)

## Install dependencies
```bash
npm install
```

## Run
```bash
node index.js --verbose --port 9009
```

.endtemplate
